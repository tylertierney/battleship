{"version":3,"sources":["helperFunctions.tsx","context/OceanContext.tsx","context/ShipConstructor.tsx","context/ShipContext.tsx","context/SquareSize.tsx","components/Instructions/ShipPlacementInstructions.tsx","components/Instructions/GameInstructions.tsx","context/GameContext.tsx","components/Instructions/Instructions.tsx","components/Numbers/Numbers.tsx","components/Letters/Letters.tsx","components/Square/EmptyTile.tsx","components/GridOverlay/GridOverlay.tsx","components/Square/ShipTile.tsx","components/Square/EndPiece.tsx","components/HoveredShip/HoveredShip.tsx","components/Ocean/Ocean.tsx","components/Gameboard/UserGameboard.tsx","components/Gameboard/ComputerGameboard.tsx","components/Waves/Waves.tsx","App.tsx","index.tsx"],"names":["checkIfShipOutOfBounds","arr","shipTile","inner","handleClick","coordinates","ocean","i","length","shipCoordX","coords","shipCoordY","style","width","height","backgroundColor","zIndex","initialOcean","Array","fill","map","computerOcean","checkForVerticalShipCollision","row","column","j","console","log","ships","battleship","values","orientation","carrier","cruiser","submarine","destroyer","possibleRows","ship","thisShip","randomVal","Math","floor","random","splice","z","generateComputerOcean","OceanContext","React","createContext","OceanProvider","children","useReducer","state","action","type","payload","dispatch","ctx","enterShips","copyOfOcean","xVal","yVal","confirmShipPlacement","Provider","value","useOceanContext","useContext","Ship","name","coordinateArray","isCurrent","this","initialShips","ShipContext","ShipProvider","currentShip","updateCurrentShip","method","copyOfShips","setCurrentShip","useShip","SquareContext","SquareSizeProvider","useState","squareSize","setSquareSize","useSquareSize","ShipPlacementInstructions","margin","className","borderBottom","listStyleType","minWidth","maxWidth","padding","display","alignItems","justifyContent","marginBottom","textDecoration","marginRight","onClick","color","size","GameInstructions","minHeight","initial","phase","GameContext","GameContextProvider","gameInfo","changeGamePhase","copyOfGameInfo","useGameContext","Instructions","flexDirection","Numbers","numbers","push","opacity","Letters","letters","String","fromCharCode","EmptyTile","squareValue","isHovering","setIsHovering","placementIsDisabled","setPlacementIsDisabled","targetX","targetY","isHit","getCoordArrayFromShip","useEffect","result","JSON","stringify","result2","onMouseEnter","onMouseLeave","undefined","overflow","cursor","GridOverlay","columns","rows","borderRight","position","top","left","ShipTile","shipColor","EndPiece","direction","borderColor","HoveredShip","hoverRef","pieces","hoveredShipColor","resultArr","item","index","ref","transform","visibility","Ocean","oceanRef","oceanOffsetX","oceanOffsetY","isPlayer","useRef","oceanToMap","e","current","onMouseMove","target","x","clientX","y","clientY","handleHover","index1","index2","UserGameboard","setOceanOffsetX","setOceanOffsetY","window","innerWidth","getBoundingClientRect","styles","transition","ComputerGameboard","Waves","vantaEffect","setVantaEffect","myRef","WAVES","el","mouseControls","touchControls","gyroControls","scale","scaleMobile","waveHeight","waveSpeed","zoom","destroy","App","SquareSize","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9cd22bc7.chunk.js","sourcesContent":["import { Ship } from \"./context/ShipConstructor\";\n\nexport const confirmShipPlacement = (\n  copyOfOcean: any,\n  arr: any,\n  orientation: any\n) => {\n  for (let i = 0; i < arr.length; i++) {\n    let xVal = arr[i].coords[0];\n    let yVal = arr[i].coords[1];\n\n    // If the tile is an end piece, determine whether it's up, right, left, or down\n    if (i === 0) {\n      if (orientation === \"Horizontal\") {\n        copyOfOcean[xVal][yVal] = 2;\n      } else {\n        copyOfOcean[xVal][yVal] = 4;\n      }\n    } else if (i === arr.length - 1) {\n      if (orientation === \"Horizontal\") {\n        copyOfOcean[xVal][yVal] = 3;\n      } else {\n        copyOfOcean[xVal][yVal] = 5;\n      }\n    } else {\n      copyOfOcean[xVal][yVal] = 1;\n    }\n  }\n  return copyOfOcean;\n};\n\nexport const checkIfShipOutOfBounds = (\n  arr: any,\n  shipTile: any,\n  inner: any,\n  handleClick: any,\n  coordinates: any,\n  ocean: any\n) => {\n  for (let i = 0; i < arr.length; i++) {\n    const shipCoordX = arr[i].coords[0];\n    const shipCoordY = arr[i].coords[1];\n\n    // This checks if a square is \"beneath\" the ship while it is hovering\n    if (shipCoordX === coordinates[0] && shipCoordY === coordinates[1]) {\n      // inner = shipTile;\n      inner = (\n        <div\n          style={{\n            width: \"100%\",\n            height: \"100%\",\n            backgroundColor: \"rgb(0, 0, 0, 0.3)\",\n            zIndex: -1,\n          }}\n        ></div>\n      );\n    }\n\n    // This checks if any of the squares on the ship are out of bounds\n    if (shipCoordX < 0 || shipCoordX > 7) {\n      return { inner: null, handleClick: null };\n    }\n    if (shipCoordY < 0 || shipCoordY > 7) {\n      return { inner: null, handleClick: null };\n    }\n\n    if (ocean[shipCoordX][shipCoordY] != 0) {\n      inner = null;\n      handleClick = null;\n    }\n  }\n\n  return { inner, handleClick };\n};\n\nexport const getCoordArrayFromShip: any = (\n  length: number,\n  orientation: string,\n  targetX: number | null,\n  targetY: number | null\n) => {\n  if (targetX === null || targetY === null) {\n    return null;\n  }\n\n  let arr: any = Array(length).fill(0);\n  if (orientation === \"Vertical\") {\n    for (let i = -1; i < arr.length - 1; i++) {\n      arr[i + 1] = {\n        coords: [targetX + i, targetY],\n        isHit: false,\n      };\n    }\n  } else {\n    for (let i = -1; i < arr.length - 1; i++) {\n      arr[i + 1] = {\n        coords: [targetX, targetY + i],\n        isHit: false,\n      };\n    }\n  }\n  return arr;\n};\n\nexport const handleHover = (\n  e: any,\n  ref: any,\n  oceanOffsetX: any,\n  oceanOffsetY: any\n) => {\n  const target = e.target;\n\n  const x = e.clientX - oceanOffsetX;\n  const y = e.clientY - oceanOffsetY;\n\n  ref = ref.current;\n\n  ref.style.top = y + \"px\";\n  ref.style.left = x + \"px\";\n};\n\nexport const handleMouseEnter = (ref: any) => {\n  if (ref.current) {\n    ref.current.style.display = \"flex\";\n    ref.current.style.visibility = \"visible\";\n  }\n};\n\nexport const handleMouseLeave = (ref: any) => {\n  if (ref.current) {\n    ref.current.style.display = \"none\";\n    ref.current.style.visibility = \"hidden\";\n  }\n};\n\nexport const generateComputerOcean = () => {\n  const checkForVerticalShipCollision = (\n    length: number,\n    ocean: any,\n    row: number,\n    column: number\n  ) => {\n    for (let i = row, j = 0; j < length; j++, i++) {\n      if (i > 7) {\n        return false;\n      }\n      if (ocean[i][column] != 0) {\n        return false;\n      }\n      console.log(\"row: \" + row + \"column: \" + column);\n    }\n    return true;\n  };\n\n  const ships: any = {\n    battleship: { values: [4, 1, 1, 5], orientation: \"Vertical\" },\n    carrier: { values: [2, 1, 1, 1, 3], orientation: \"Horizontal\" },\n    cruiser: { values: [2, 1, 3], orientation: \"Horizontal\" },\n    submarine: { values: [2, 1, 3], orientation: \"Horizontal\" },\n    destroyer: { values: [2, 3], orientation: \"Horizontal\" },\n  };\n\n  // Randomly choose an orientation for each ship\n  // for (const ship in ships) {\n  //   const random: number = Math.floor(Math.random() * 2);\n  //   const thisShip = ships[ship];\n  //   // If orientation ends up vertical, change the end pieces\n  //   if (random) {\n  //     thisShip.orientation = \"Vertical\";\n  //     thisShip.values[0] = 4;\n  //     thisShip.values[thisShip.values.length - 1] = 5;\n  //   }\n  // }\n\n  let ocean = Array(8)\n    .fill(0)\n    .map(() => Array(8).fill(0));\n\n  // Place the horizontal ships randomly\n\n  let possibleRows = [0, 1, 2, 3, 4, 5, 6, 7];\n\n  for (const ship in ships) {\n    const thisShip = ships[ship];\n    const values = thisShip.values;\n    if (thisShip.orientation === \"Horizontal\") {\n      let randomVal = Math.floor(Math.random() * possibleRows.length);\n      let row = possibleRows[randomVal];\n      possibleRows.splice(randomVal, 1);\n      let column = Math.floor(Math.random() * (8 - values.length - 1));\n      for (let j = 0; j < values.length; column++, j++) {\n        ocean[row][column] = values[j];\n      }\n    }\n  }\n  for (const ship in ships) {\n    const thisShip = ships[ship];\n    const values = thisShip.values;\n    if (thisShip.orientation === \"Vertical\") {\n      // let randomColumn = Math.floor(Math.random() * 8);\n      // let randomRow = Math.floor(Math.random() * (8 - values.length - 1));\n\n      for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n          if (checkForVerticalShipCollision(values.length, ocean, i, j)) {\n            for (let z = 0; z < values.length; z++, i++) {\n              ocean[i][j] = values[z];\n            }\n            break;\n          }\n        }\n      }\n    }\n  }\n  console.log(ocean);\n  return ocean;\n};\n","import React, { useContext, useReducer } from \"react\";\n\nimport {\n  confirmShipPlacement,\n  generateComputerOcean,\n} from \"../helperFunctions\";\n\nimport { ShipInterface } from \"./ShipContext\";\n\nconst initialOcean: any = Array(8)\n  .fill(0)\n  .map(() => Array(8).fill(0));\n\nconst computerOcean: any = generateComputerOcean();\n\nconst OceanContext = React.createContext(initialOcean);\n\nconst OceanProvider = ({ children }: any) => {\n  const reducer = (state: any, action: any) => {\n    switch (action.type) {\n      case \"enterShips\":\n        return action.payload;\n    }\n  };\n\n  const [ocean, dispatch] = useReducer(reducer, initialOcean);\n\n  const enterShips = (arr: any, orientation: any) => {\n    let copyOfOcean = [...ocean];\n\n    copyOfOcean = confirmShipPlacement(copyOfOcean, arr, orientation);\n\n    dispatch({ type: \"enterShips\", payload: copyOfOcean });\n  };\n\n  const ctx = {\n    ocean,\n    enterShips,\n    computerOcean,\n  };\n\n  return <OceanContext.Provider value={ctx}>{children}</OceanContext.Provider>;\n};\n\nexport default OceanProvider;\n\nexport const useOceanContext = () => useContext(OceanContext);\n","export class Ship {\n  name: string;\n  length: number;\n  orientation: string;\n  coordinateArray: number[][] | null;\n  isCurrent: boolean;\n\n  constructor(\n    name: string,\n    length: number,\n    orientation: string,\n    coordinateArray: number[][] | null,\n    isCurrent: boolean\n  ) {\n    this.name = name;\n    this.length = length;\n    this.orientation = orientation;\n    this.coordinateArray = coordinateArray;\n    this.isCurrent = isCurrent;\n  }\n}\n","import React, { useContext, useReducer } from \"react\";\n\nimport { Ship } from \"./ShipConstructor\";\n\nexport interface ShipInterface {\n  /**\n   * Name must be a string.\n   */\n  name: string;\n  /**\n   * Length must be an int;\n   */\n  length: number;\n  /**\n   * Orientation must be a string.\n   */\n  orientation: string;\n  /**\n   * Coordinate Array is an array of arrays, each signifying coordinates\n   * where the ship is placed\n   */\n  coordinateArray: any[][];\n  isCurrent: boolean;\n}\n\nconst initialShips: any = [\n  new Ship(\"Battleship\", 4, \"Horizontal\", null, true),\n  new Ship(\"Carrier\", 5, \"Horizontal\", null, false),\n  new Ship(\"Cruiser\", 3, \"Horizontal\", null, false),\n  new Ship(\"Submarine\", 3, \"Horizontal\", null, false),\n  new Ship(\"Destroyer\", 2, \"Horizontal\", null, false),\n];\n\nconst ShipContext = React.createContext(initialShips);\n\nconst ShipProvider = ({ children }: any) => {\n  const reducer = (state: any, action: any) => {\n    switch (action.type) {\n      case \"setCurrentShip\":\n        return action.payload;\n      case \"updateCurrentShip\":\n        return action.payload;\n    }\n  };\n\n  const [ships, dispatch] = useReducer(reducer, initialShips);\n\n  const setCurrentShip = (ship: ShipInterface) => {\n    let copyOfShips = [...ships];\n\n    for (let i = 0; i < copyOfShips.length; i++) {\n      if (ship.name === copyOfShips[i].name) {\n        if (i === copyOfShips.length - 1) {\n          dispatch({ type: \"setCurrentShip\", payload: copyOfShips });\n          return;\n        }\n        copyOfShips[i].isCurrent = false;\n        copyOfShips[i + 1].isCurrent = true;\n\n        dispatch({ type: \"setCurrentShip\", payload: copyOfShips });\n        return;\n      } else {\n        copyOfShips[i].isCurrent = false;\n      }\n    }\n  };\n\n  const updateCurrentShip = (method: string, arr: any) => {\n    let currentShip;\n    let copyOfShips = [...ships];\n    for (let i = 0; i < copyOfShips.length; i++) {\n      if (copyOfShips[i].isCurrent) {\n        currentShip = copyOfShips[i];\n\n        switch (method) {\n          case \"changeOrientation\":\n            if (currentShip.orientation === \"Vertical\") {\n              currentShip.orientation = \"Horizontal\";\n            } else {\n              currentShip.orientation = \"Vertical\";\n            }\n\n            dispatch({ type: \"updateCurrentShip\", payload: copyOfShips });\n            break;\n          case \"updateCoords\":\n            currentShip.coordinateArray = arr;\n            dispatch({ type: \"updateCurrentShip\", payload: copyOfShips });\n            break;\n          default:\n          // do something\n        }\n      }\n    }\n  };\n\n  const getCurrentShip = () => {\n    for (let i = 0; i < ships.length; i++) {\n      if (ships[i].isCurrent) {\n        return ships[i];\n      }\n    }\n  };\n\n  const ctx = {\n    currentShip: getCurrentShip,\n    updateCurrentShip,\n    setCurrentShip,\n    ships,\n  };\n\n  return <ShipContext.Provider value={ctx}>{children}</ShipContext.Provider>;\n};\n\nexport default ShipProvider;\n\nexport const useShip = () => useContext(ShipContext);\n","import React, { useContext, useState } from \"react\";\n\nconst initial = 25;\nconst SquareContext = React.createContext(initial);\n\nconst SquareSizeProvider = ({ children }: any) => {\n  const [squareSize, setSquareSize] = useState(initial);\n\n  const ctx: any = {\n    squareSize,\n    setSquareSize,\n  };\n\n  return (\n    <SquareContext.Provider value={ctx}>{children}</SquareContext.Provider>\n  );\n};\n\nexport default SquareSizeProvider;\n\nexport const useSquareSize = () => useContext(SquareContext);\n","import \"../../App.css\";\n\nimport { useShip } from \"../../context/ShipContext\";\n\nimport { BiRefresh } from \"react-icons/bi\";\n\nimport { useSquareSize } from \"../../context/SquareSize\";\n\nconst ShipPlacementInstructions: React.FC = () => {\n  const { squareSize }: any = useSquareSize();\n  let { ships, currentShip, updateCurrentShip } = useShip();\n\n  currentShip = currentShip();\n\n  const { name, length, orientation } = currentShip;\n\n  return (\n    <>\n      <h1 style={{ margin: \"8px\" }} className=\"instructionsHeader\">\n        Place your&nbsp;\n        <span\n          style={{\n            borderBottom: \"2px solid white\",\n          }}\n        >\n          {name}\n        </span>\n      </h1>\n      <ul\n        style={{\n          listStyleType: \"none\",\n          minWidth: \"300px\",\n          maxWidth: \"450px\",\n          padding: \"0\",\n        }}\n      >\n        <li\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            marginBottom: \"10px\",\n          }}\n        >\n          <span>Length:</span>\n          <span className=\"instructionControls\">{length}&nbsp;tiles</span>\n        </li>\n        <li\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <span>Orientation:</span>\n\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            <span\n              style={{\n                textDecoration: \"underline\",\n                marginRight: \"10px\",\n              }}\n              className=\"instructionControls\"\n            >\n              {orientation}\n            </span>\n            <button\n              onClick={() => updateCurrentShip(\"changeOrientation\")}\n              className=\"orientationToggle\"\n            >\n              <BiRefresh color=\"white\" size=\"2rem\" />\n            </button>\n          </div>\n        </li>\n      </ul>\n    </>\n  );\n};\n\nexport default ShipPlacementInstructions;\n","const GameInstructions = () => {\n  return (\n    <div style={{ minHeight: \"150px\" }}>\n      <h1 style={{ margin: \"8px\" }} className=\"instructionsHeader\">\n        Take the shot!\n      </h1>\n    </div>\n  );\n};\n\nexport default GameInstructions;\n","import React, { useContext, useReducer } from \"react\";\n\nconst initial = { phase: \"playing\" };\n\nconst GameContext = React.createContext(initial);\n\nconst GameContextProvider = ({ children }: any) => {\n  const reducer = (state: any, action: any) => {\n    switch (action.type) {\n      case \"changeGamePhase\":\n        return action.payload;\n    }\n  };\n\n  const [gameInfo, dispatch] = useReducer(reducer, initial);\n\n  const changeGamePhase = (phase: string) => {\n    let copyOfGameInfo = { ...gameInfo };\n\n    copyOfGameInfo.phase = phase;\n\n    dispatch({ type: \"changeGamePhase\", payload: copyOfGameInfo });\n  };\n\n  const ctx: any = {\n    gameInfo,\n    changeGamePhase,\n  };\n\n  return <GameContext.Provider value={ctx}>{children}</GameContext.Provider>;\n};\n\nexport default GameContextProvider;\n\nexport const useGameContext = () => useContext(GameContext);\n","import ShipPlacementInstructions from \"./ShipPlacementInstructions\";\nimport GameInstructions from \"./GameInstructions\";\n\nimport { useGameContext } from \"../../context/GameContext\";\n\nconst Instructions: React.FC = () => {\n  const { gameInfo }: any = useGameContext();\n\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        color: \"white\",\n        maxWidth: \"90vw\",\n      }}\n    >\n      {gameInfo.phase === \"enteringShips\" ? (\n        <ShipPlacementInstructions />\n      ) : (\n        <GameInstructions />\n      )}\n    </div>\n  );\n};\n\nexport default Instructions;\n","import { useSquareSize } from \"../../context/SquareSize\";\n\nconst Numbers: React.FC = () => {\n  const { squareSize }: any = useSquareSize();\n\n  let numbers = [];\n  for (let j = 0; j < 8; j++) {\n    numbers.push(\n      <div\n        key={j}\n        style={{\n          height: \"100%\",\n          width: \"100%\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          color: \"white\",\n          opacity: \"0.5\",\n        }}\n      >\n        {j + 1}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        width: squareSize + \"px\",\n        height: \"100%\",\n      }}\n    >\n      {numbers}\n    </div>\n  );\n};\n\nexport default Numbers;\n","import { useSquareSize } from \"../../context/SquareSize\";\n\nconst Letters: React.FC = () => {\n  const { squareSize }: any = useSquareSize();\n\n  let letters = [];\n\n  for (let i = 0; i < 9; i++) {\n    let inner: string | null = String.fromCharCode(i - 1 + 65);\n    if (i === 0) {\n      inner = null;\n    }\n    letters.push(\n      <div\n        key={i}\n        style={{\n          height: \"100%\",\n          width: \"100%\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          color: \"white\",\n          opacity: \"0.5\",\n        }}\n      >\n        {inner}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      style={{\n        height: squareSize + \"px\",\n        width: 9 * squareSize + \"px\",\n        display: \"flex\",\n      }}\n    >\n      {letters}\n    </div>\n  );\n};\n\nexport default Letters;\n","import { useOceanContext } from \"../../context/OceanContext\";\n\nimport { useShip } from \"../../context/ShipContext\";\n\nimport \"../../App.css\";\n\nimport { useSquareSize } from \"../../context/SquareSize\";\n\nimport { useEffect, useState } from \"react\";\n\nimport {\n  checkIfShipOutOfBounds,\n  getCoordArrayFromShip,\n} from \"../../helperFunctions\";\n\nimport { useGameContext } from \"../../context/GameContext\";\n\ninterface SquareProps {\n  squareValue: number;\n  coordinates: number[];\n  isHovering: any[];\n  setIsHovering: Function;\n  placementIsDisabled: boolean;\n  setPlacementIsDisabled: Function;\n  // setIsEnteringShips: Function;\n  // isEnteringShips: boolean;\n}\n\nconst EmptyTile: React.FC<SquareProps> = ({\n  squareValue,\n  coordinates,\n  isHovering,\n  setIsHovering,\n  placementIsDisabled,\n  setPlacementIsDisabled,\n  // setIsEnteringShips,\n  // isEnteringShips,\n}) => {\n  const { gameInfo, changeGamePhase }: any = useGameContext();\n  const { squareSize }: any = useSquareSize();\n  let { ships, currentShip, setCurrentShip, updateCurrentShip } = useShip();\n\n  currentShip = currentShip();\n\n  const { ocean, enterShips } = useOceanContext();\n\n  const shipTile = (\n    <div\n      style={{\n        width: \"100%\",\n        height: \"100%\",\n        backgroundColor: \"var(--shipColor)\",\n      }}\n    ></div>\n  );\n\n  let inner: any = null;\n  let arr = getCoordArrayFromShip(\n    currentShip.length,\n    currentShip.orientation,\n    isHovering[0],\n    isHovering[1]\n  );\n\n  let handleClick: any = () => {\n    enterShips(arr, currentShip.orientation);\n    updateCurrentShip(\"updateCoords\", arr);\n    setCurrentShip(currentShip);\n    if (currentShip.name === \"Destroyer\") {\n      changeGamePhase(\"playing\");\n    }\n  };\n\n  useEffect(() => {\n    if (arr) {\n      let result = checkIfShipOutOfBounds(\n        arr,\n        shipTile,\n        inner,\n        handleClick,\n        coordinates,\n        ocean\n      );\n      handleClick = result.handleClick;\n\n      if (result.handleClick === null) {\n        setPlacementIsDisabled(() => true);\n      } else {\n        setPlacementIsDisabled(() => false);\n      }\n    }\n\n    if (arr == null) {\n      setPlacementIsDisabled(() => true);\n    }\n  }, [JSON.stringify(arr)]);\n\n  if (arr) {\n    let result2 = checkIfShipOutOfBounds(\n      arr,\n      shipTile,\n      inner,\n      handleClick,\n      coordinates,\n      ocean\n    );\n    inner = result2.inner;\n  }\n\n  return (\n    <div\n      onClick={placementIsDisabled ? null : handleClick}\n      onMouseEnter={() => setIsHovering([...coordinates])}\n      onMouseLeave={\n        gameInfo.phase === \"enteringShips\"\n          ? () => setIsHovering([null, null])\n          : undefined\n      }\n      style={{\n        width: squareSize + \"px\",\n        height: \"100%\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        overflow: \"hidden\",\n        cursor: \"none\",\n      }}\n    >\n      {inner}\n    </div>\n  );\n};\n\nexport default EmptyTile;\n","import { useSquareSize } from \"../../context/SquareSize\";\n\nconst GridOverlay = () => {\n  const { squareSize }: any = useSquareSize();\n\n  let columns: any = [];\n  let rows: any = [];\n\n  for (let i = 0; i < 8; i++) {\n    let borderRight = \"2px solid white\";\n    let borderBottom = \"2px solid white\";\n\n    if (i === 7) {\n      borderRight = \"none\";\n      borderBottom = \"none\";\n    }\n    columns.push(\n      <div\n        key={i}\n        style={{\n          width: squareSize + \"px\",\n          height: \"100%\",\n          borderRight,\n        }}\n      ></div>\n    );\n    rows.push(\n      <div key={i} style={{ width: \"100%\", height: \"50%\", borderBottom }}></div>\n    );\n  }\n\n  return (\n    <div\n      style={{\n        width: 8 * squareSize + \"px\",\n        height: 8 * squareSize + \"px\",\n        position: \"absolute\",\n        top: \"0\",\n        left: \"0\",\n        backgroundColor: \"transparent\",\n      }}\n    >\n      <div\n        style={{\n          position: \"absolute\",\n          width: \"100%\",\n          height: \"100%\",\n          display: \"flex\",\n          justifyContent: \"flex-start\",\n          alignItems: \"center\",\n        }}\n      >\n        {columns}\n      </div>\n      <div\n        style={{\n          position: \"absolute\",\n          width: \"100%\",\n          height: \"100%\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"flex-start\",\n          alignItems: \"center\",\n        }}\n      >\n        {rows}\n      </div>\n    </div>\n  );\n};\n\nexport default GridOverlay;\n","import \"../../App.css\";\n\nimport { useSquareSize } from \"../../context/SquareSize\";\n\ninterface ShipTileProps {\n  shipColor: string;\n}\nconst ShipTile: React.FC<ShipTileProps> = ({ shipColor }) => {\n  const { squareSize }: any = useSquareSize();\n\n  return (\n    <div\n      style={{\n        width: squareSize + \"px\",\n        height: \"100%\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        backgroundColor: shipColor,\n        overflow: \"hidden\",\n        cursor: \"none\",\n      }}\n    >\n      <div\n        style={{\n          width: \"100%\",\n          height: \"100%\",\n          backgroundColor: shipColor,\n          overflow: \"hidden\",\n        }}\n      ></div>\n    </div>\n  );\n};\n\nexport default ShipTile;\n","import \"../../App.css\";\n\nimport { useSquareSize } from \"../../context/SquareSize\";\n\ninterface EndPieceProps {\n  coordinates: number[];\n  squareValue: number;\n  shipColor: string;\n}\nconst EndPiece: React.FC<EndPieceProps> = ({\n  coordinates,\n  squareValue,\n  shipColor,\n}) => {\n  const { squareSize }: any = useSquareSize();\n  let direction;\n  let borderRight = \"none\";\n\n  switch (squareValue) {\n    case 2:\n      direction = \"pointLeft\";\n      break;\n    case 3:\n      direction = \"pointRight\";\n      borderRight = \"2px solid white\";\n      break;\n    case 4:\n      direction = \"pointUp\";\n      borderRight = \"2px solid white\";\n      break;\n    case 5:\n      direction = \"pointDown\";\n      break;\n    default:\n      direction = \"pointLeft\";\n  }\n\n  return (\n    <div\n      style={{\n        height: \"95%\",\n        width: squareSize + \"px\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        cursor: \"none\",\n      }}\n    >\n      <div\n        style={{ backgroundColor: shipColor, borderColor: shipColor }}\n        className={`endPiece ${direction}`}\n      ></div>\n    </div>\n  );\n};\n\nexport default EndPiece;\n","import { useShip } from \"../../context/ShipContext\";\nimport ShipTile from \"../Square/ShipTile\";\nimport EndPiece from \"../Square/EndPiece\";\nimport { useSquareSize } from \"../../context/SquareSize\";\nimport \"../../App.css\";\n\ninterface HoverRefProps {\n  hoverRef: any;\n  placementIsDisabled: boolean;\n}\n\nconst HoveredShip: React.FC<HoverRefProps> = ({\n  hoverRef,\n  placementIsDisabled,\n}) => {\n  const { squareSize }: any = useSquareSize();\n  let { currentShip } = useShip();\n  currentShip = currentShip();\n\n  const orientation = currentShip.orientation;\n\n  let pieces = [];\n\n  let hoveredShipColor = \"var(--hoveredShipColor)\";\n  if (placementIsDisabled) {\n    hoveredShipColor = \"rgb(173, 0, 0, 0.5)\";\n  }\n\n  for (let i = 0; i < currentShip.length; i++) {\n    if (i === 0) {\n      if (orientation === \"Horizontal\") {\n        pieces.push(\n          <EndPiece\n            key={i}\n            coordinates={[3, 3]}\n            squareValue={2}\n            shipColor={hoveredShipColor}\n          />\n        );\n      } else {\n        pieces.push(\n          <EndPiece\n            key={i}\n            coordinates={[3, 3]}\n            squareValue={4}\n            shipColor={hoveredShipColor}\n          />\n        );\n      }\n    } else if (i === currentShip.length - 1) {\n      if (orientation === \"Horizontal\") {\n        pieces.push(\n          <EndPiece\n            key={i}\n            coordinates={[3, 3]}\n            squareValue={3}\n            shipColor={hoveredShipColor}\n          />\n        );\n      } else {\n        pieces.push(\n          <EndPiece\n            key={i}\n            coordinates={[3, 3]}\n            squareValue={5}\n            shipColor={hoveredShipColor}\n          />\n        );\n      }\n    } else {\n      pieces.push(<ShipTile key={i} shipColor={hoveredShipColor} />);\n    }\n  }\n\n  let resultArr = pieces.map((item, index) => {\n    return (\n      <div\n        key={index}\n        style={{\n          width: squareSize + \"px\",\n          height: squareSize + \"px\",\n          overflow: \"hidden\",\n        }}\n      >\n        {item}\n      </div>\n    );\n  });\n\n  return (\n    <div\n      ref={hoverRef}\n      style={{\n        position: \"absolute\",\n        display: \"flex\",\n        width: orientation === \"Vertical\" ? squareSize + \"px\" : \"auto\",\n        height: orientation === \"Vertical\" ? \"auto\" : squareSize + \"px\",\n        flexDirection: orientation === \"Vertical\" ? \"column\" : \"row\",\n        overflow: \"hidden\",\n        transform:\n          orientation === \"Horizontal\"\n            ? `translate(${-(squareSize + 15)}px, -50%)`\n            : `translate(-50%, ${-(squareSize + 10)}px)`,\n        visibility: \"hidden\",\n        cursor: \"none\",\n      }}\n    >\n      {resultArr}\n    </div>\n  );\n};\n\nexport default HoveredShip;\n","import { useOceanContext } from \"../../context/OceanContext\";\n\nimport { useSquareSize } from \"../../context/SquareSize\";\n\nimport \"../../App.css\";\n\nimport EmptyTile from \"../Square/EmptyTile\";\n\nimport { useState } from \"react\";\n\nimport GridOverlay from \"../GridOverlay/GridOverlay\";\n\nimport ShipTile from \"../Square/ShipTile\";\nimport EndPiece from \"../Square/EndPiece\";\nimport { useRef } from \"react\";\n\nimport HoveredShip from \"../HoveredShip/HoveredShip\";\n\nimport {\n  handleHover,\n  handleMouseEnter,\n  handleMouseLeave,\n} from \"../../helperFunctions\";\n\nimport { useGameContext } from \"../../context/GameContext\";\n\ninterface OceanProps {\n  // setIsEnteringShips: Function;\n  // isEnteringShips: boolean;\n  oceanRef: any;\n  oceanOffsetX: number | null;\n  oceanOffsetY: number | null;\n  isPlayer: boolean;\n}\n\nconst Ocean: React.FC<OceanProps> = ({\n  oceanRef,\n  oceanOffsetX,\n  oceanOffsetY,\n  isPlayer,\n}) => {\n  const { gameInfo }: any = useGameContext();\n  const hoverRef = useRef<HTMLDivElement>(null);\n\n  const { squareSize, setSquareSize }: any = useSquareSize();\n\n  const { ocean, computerOcean } = useOceanContext();\n\n  const [isHovering, setIsHovering] = useState([null, null]);\n\n  const [placementIsDisabled, setPlacementIsDisabled] = useState(true);\n\n  const oceanToMap = isPlayer ? ocean : computerOcean;\n\n  return (\n    <>\n      <div\n        ref={oceanRef}\n        style={{\n          height: 8 * squareSize + \"px\",\n          width: 8 * squareSize + \"px\",\n          position: \"relative\",\n          overflow: \"hidden\",\n        }}\n        onMouseEnter={\n          gameInfo.phase === \"enteringShips\"\n            ? (e) => handleMouseEnter(hoverRef)\n            : undefined\n        }\n        onMouseMove={(e) =>\n          gameInfo.phase === \"enteringShips\"\n            ? handleHover(e, hoverRef, oceanOffsetX, oceanOffsetY)\n            : undefined\n        }\n        onMouseLeave={\n          gameInfo.phase === \"enteringShips\"\n            ? (e) => handleMouseLeave(hoverRef)\n            : undefined\n        }\n      >\n        <GridOverlay />\n        {gameInfo.phase === \"enteringShips\" && (\n          <HoveredShip\n            hoverRef={hoverRef}\n            placementIsDisabled={placementIsDisabled}\n          />\n        )}\n        {oceanToMap.map((item: any, index1: any) => {\n          return (\n            <div\n              key={index1}\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                width: \"100%\",\n                position: \"relative\",\n                height: squareSize + \"px\",\n              }}\n            >\n              {item.map((item: any, index2: any) => {\n                const coordinates = [index1, index2];\n\n                switch (item) {\n                  case 0:\n                    return (\n                      <EmptyTile\n                        key={index2}\n                        coordinates={coordinates}\n                        squareValue={item}\n                        isHovering={isHovering}\n                        setIsHovering={setIsHovering}\n                        placementIsDisabled={placementIsDisabled}\n                        setPlacementIsDisabled={setPlacementIsDisabled}\n                        // setIsEnteringShips={setIsEnteringShips}\n                        // isEnteringShips={isEnteringShips}\n                      />\n                    );\n                  case 1:\n                    return (\n                      <ShipTile key={index2} shipColor=\"var(--shipColor)\" />\n                    );\n                  default:\n                    return (\n                      <EndPiece\n                        key={index2}\n                        coordinates={coordinates}\n                        squareValue={item}\n                        shipColor=\"var(--shipColor)\"\n                      />\n                    );\n                }\n              })}\n            </div>\n          );\n        })}\n        {gameInfo.phase === \"playing\" && (\n          <div\n            style={{\n              width: \"100%\",\n              height: \"100%\",\n              position: \"absolute\",\n              top: \"0\",\n              left: \"0\",\n            }}\n          ></div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default Ocean;\n","import Numbers from \"../Numbers/Numbers\";\nimport Letters from \"../Letters/Letters\";\nimport Ocean from \"../Ocean/Ocean\";\n\nimport { useEffect, useState, useRef } from \"react\";\n\nimport { useSquareSize } from \"../../context/SquareSize\";\n\nimport { useGameContext } from \"../../context/GameContext\";\n\ninterface UserGameboardProps {\n  size: string;\n}\n\nconst UserGameboard: React.FC<UserGameboardProps> = ({ size }) => {\n  const { gameInfo }: any = useGameContext();\n  const oceanRef = useRef<HTMLDivElement>(null);\n  const { squareSize, setSquareSize }: any = useSquareSize();\n\n  const [oceanOffsetX, setOceanOffsetX] = useState(0);\n  const [oceanOffsetY, setOceanOffsetY] = useState(0);\n\n  useEffect(() => {\n    if (window.innerWidth < 400) {\n      setSquareSize(38);\n    } else {\n      setSquareSize(50);\n    }\n\n    if (oceanRef.current) {\n      setOceanOffsetX(oceanRef.current.getBoundingClientRect().left);\n      setOceanOffsetY(oceanRef.current.getBoundingClientRect().top);\n    }\n  }, [window.innerWidth, oceanRef.current]);\n\n  let styles: any = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n    transform: \"none\",\n    position: \"relative\",\n    transition: \"0.6s ease-in-out\",\n  };\n\n  if (size === \"small\") {\n    styles.position = \"absolute\";\n    styles.top = \"-63%\";\n    styles.left = \"0\";\n    styles.transform = \"scale(25%)\";\n  }\n\n  return (\n    <>\n      <div style={styles}>\n        <Letters />\n\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            height: 8 * squareSize + \"px\",\n          }}\n        >\n          <Numbers />\n          <Ocean\n            oceanRef={oceanRef}\n            oceanOffsetX={oceanOffsetX}\n            oceanOffsetY={oceanOffsetY}\n            isPlayer={true}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default UserGameboard;\n","import Numbers from \"../Numbers/Numbers\";\nimport Letters from \"../Letters/Letters\";\nimport Ocean from \"../Ocean/Ocean\";\n\nimport { useEffect, useState, useRef } from \"react\";\n\nimport { useSquareSize } from \"../../context/SquareSize\";\n\nimport { useGameContext } from \"../../context/GameContext\";\n\ninterface UserGameboardProps {\n  size: string;\n}\n\nconst ComputerGameboard: React.FC<UserGameboardProps> = ({ size }) => {\n  const { gameInfo }: any = useGameContext();\n  const oceanRef = useRef<HTMLDivElement>(null);\n  const { squareSize, setSquareSize }: any = useSquareSize();\n\n  const [oceanOffsetX, setOceanOffsetX] = useState(0);\n  const [oceanOffsetY, setOceanOffsetY] = useState(0);\n\n  useEffect(() => {\n    if (window.innerWidth < 400) {\n      setSquareSize(38);\n    } else {\n      setSquareSize(50);\n    }\n\n    if (oceanRef.current) {\n      setOceanOffsetX(oceanRef.current.getBoundingClientRect().left);\n      setOceanOffsetY(oceanRef.current.getBoundingClientRect().top);\n    }\n  }, [window.innerWidth, oceanRef.current]);\n\n  let styles: any = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n    transform: \"none\",\n    position: \"relative\",\n    transition: \"0.6s ease-in-out\",\n  };\n\n  if (size === \"small\") {\n    styles.position = \"absolute\";\n    styles.top = \"-63%\";\n    styles.left = \"0\";\n    styles.transform = \"scale(25%)\";\n  }\n\n  return (\n    <>\n      <div style={styles}>\n        <Letters />\n\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            height: 8 * squareSize + \"px\",\n          }}\n        >\n          <Numbers />\n          <Ocean\n            oceanRef={oceanRef}\n            oceanOffsetX={oceanOffsetX}\n            oceanOffsetY={oceanOffsetY}\n            isPlayer={false}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ComputerGameboard;\n","import { useEffect, useState, useRef } from \"react\";\nimport WAVES from \"vanta/dist/vanta.waves.min.js\";\nimport Instructions from \"../Instructions/Instructions\";\nimport UserGameboard from \"../Gameboard/UserGameboard\";\nimport ComputerGameboard from \"../Gameboard/ComputerGameboard\";\nimport { useGameContext } from \"../../context/GameContext\";\n\nconst Waves = () => {\n  const { gameInfo }: any = useGameContext();\n\n  const [vantaEffect, setVantaEffect] = useState<any>(0);\n  const myRef = useRef(null);\n  useEffect(() => {\n    if (!vantaEffect) {\n      setVantaEffect(\n        WAVES({\n          el: myRef.current,\n          mouseControls: false,\n          touchControls: false,\n          gyroControls: false,\n          minHeight: 200.0,\n          minWidth: 200.0,\n          scale: 1.0,\n          scaleMobile: 1.0,\n          color: 0x101e36,\n          waveHeight: 30.0,\n          waveSpeed: 0.4,\n          zoom: 0.81,\n        })\n      );\n    }\n    return () => {\n      if (vantaEffect) vantaEffect.destroy();\n    };\n  }, [vantaEffect]);\n\n  const [isEnteringShips, setIsEnteringShips] = useState(true);\n\n  return (\n    <div\n      ref={myRef}\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"flex-start\",\n        alignItems: \"center\",\n        width: \"100vw\",\n        height: \"700px\",\n      }}\n    >\n      <Instructions />\n\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          position: \"relative\",\n          width: \"450px\",\n          height: \"450px\",\n        }}\n      >\n        <UserGameboard\n          size={gameInfo.phase === \"enteringShips\" ? \"large\" : \"small\"}\n        />\n        {gameInfo.phase === \"playing\" && <ComputerGameboard size=\"large\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default Waves;\n","import OceanProvider from \"./context/OceanContext\";\n\nimport ShipProvider from \"./context/ShipContext\";\n\nimport SquareSizeProvider from \"./context/SquareSize\";\n\nimport Waves from \"./components/Waves/Waves\";\n\nimport GameContextProvider from \"./context/GameContext\";\n\nconst App: React.FC = () => {\n  return (\n    <SquareSizeProvider>\n      <GameContextProvider>\n        <OceanProvider>\n          <ShipProvider>\n            <Waves />\n          </ShipProvider>\n        </OceanProvider>\n      </GameContextProvider>\n    </SquareSizeProvider>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}