{"version":3,"sources":["context/GameContext.tsx","helperFunctions.tsx","context/ShipConstructor.tsx","context/ShipContext.tsx","context/SquareSize.tsx","components/Square/EmptyTile.tsx","components/GridOverlay/GridOverlay.tsx","components/Square/ShipTile.tsx","components/Square/EndPiece.tsx","components/Ocean/Ocean.tsx","components/Instructions/Instructions.tsx","components/Waves/Waves.tsx","App.tsx","index.tsx"],"names":["initialOcean","Array","fill","map","OceanContext","React","createContext","OceanProvider","children","useReducer","state","action","type","payload","ocean","dispatch","ctx","enterCoordinates","coordinates","copyOfOcean","enterShips","arr","orientation","i","length","xVal","coords","yVal","confirmShipPlacement","Provider","value","useGameContext","useContext","Ship","name","mainX","mainY","coordinateArray","isCurrent","this","initialShips","ShipContext","ShipProvider","ships","currentShip","updateCurrentShip","method","copyOfShips","setCurrentShip","ship","useShip","SquareContext","SquareSizeProvider","useState","squareSize","setSquareSize","useSquareSize","EmptyTile","squareValue","isHovering","setIsHovering","shipTile","style","width","height","backgroundColor","inner","targetX","targetY","isHit","getCoordArrayFromShip","handleClick","result","shipCoordX","shipCoordY","checkIfShipOutOfBounds","onClick","onMouseEnter","onMouseLeave","display","justifyContent","alignItems","cursor","overflow","GridOverlay","columns","rows","borderRight","borderBottom","push","position","top","left","flexDirection","ShipTile","border","EndPiece","direction","className","Ocean","useEffect","window","innerWidth","letters","String","fromCharCode","color","opacity","generateLetters","numbers","j","generateNumbers","item","index1","index2","Instructions","marginBottom","maxWidth","margin","listStyleType","minWidth","padding","textDecoration","marginRight","size","Waves","vantaEffect","setVantaEffect","myRef","useRef","WAVES","el","current","mouseControls","touchControls","gyroControls","minHeight","scale","scaleMobile","waveHeight","waveSpeed","zoom","destroy","isEnteringShips","ref","App","SquareSize","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7604f61.chunk.js","sourcesContent":["import React, { useContext, useReducer } from \"react\";\n\nimport { confirmShipPlacement } from \"../helperFunctions\";\n\nimport { ShipInterface } from \"./ShipContext\";\n\nconst initialOcean: any = Array(8)\n  .fill(0)\n  .map(() => Array(8).fill(0));\n\nconst OceanContext = React.createContext(initialOcean);\n\nconst OceanProvider = ({ children }: any) => {\n  const reducer = (state: any, action: any) => {\n    switch (action.type) {\n      case \"enterCoordinates\":\n        return action.payload;\n      case \"enterShips\":\n        return action.payload;\n    }\n  };\n\n  const [ocean, dispatch] = useReducer(reducer, initialOcean);\n\n  const enterCoordinates = (coordinates: number[]) => {\n    const copyOfOcean = [...ocean];\n\n    dispatch({ type: \"enterCoordinates\", payload: copyOfOcean });\n  };\n\n  const enterShips = (arr: any, orientation: any) => {\n    let copyOfOcean = [...ocean];\n\n    copyOfOcean = confirmShipPlacement(copyOfOcean, arr, orientation);\n\n    dispatch({ type: \"enterShips\", payload: copyOfOcean });\n  };\n\n  const ctx = {\n    ocean,\n    enterCoordinates,\n    enterShips,\n  };\n\n  return <OceanContext.Provider value={ctx}>{children}</OceanContext.Provider>;\n};\n\nexport default OceanProvider;\n\nexport const useGameContext = () => useContext(OceanContext);\n","import { ShipInterface } from \"./context/ShipContext\";\n\nimport { Ship } from \"./context/ShipConstructor\";\n\nexport const confirmShipPlacement = (\n  copyOfOcean: any,\n  arr: any,\n  orientation: any\n) => {\n  for (let i = 0; i < arr.length; i++) {\n    let xVal = arr[i].coords[0];\n    let yVal = arr[i].coords[1];\n\n    // If the tile is an end piece, determine whether it's up, right, left, or down\n    if (i === 0) {\n      if (orientation === \"Horizontal\") {\n        copyOfOcean[xVal][yVal] = 2;\n      } else {\n        copyOfOcean[xVal][yVal] = 4;\n      }\n    } else if (i === arr.length - 1) {\n      if (orientation === \"Horizontal\") {\n        copyOfOcean[xVal][yVal] = 3;\n      } else {\n        copyOfOcean[xVal][yVal] = 5;\n      }\n    } else {\n      copyOfOcean[xVal][yVal] = 1;\n    }\n  }\n  return copyOfOcean;\n};\n\nexport const checkIfShipOutOfBounds = (\n  arr: any,\n  shipTile: any,\n  inner: any,\n  handleClick: any,\n  coordinates: any,\n  ocean: any\n) => {\n  for (let i = 0; i < arr.length; i++) {\n    const shipCoordX = arr[i].coords[0];\n    const shipCoordY = arr[i].coords[1];\n\n    // This checks if a square is \"beneath\" the ship while it is hovering\n    if (shipCoordX === coordinates[0] && shipCoordY === coordinates[1]) {\n      inner = shipTile;\n    }\n\n    // This checks if any of the squares on the ship are out of bounds\n    if (shipCoordX < 0 || shipCoordX > 7) {\n      return { inner: null, handleClick: null };\n    }\n    if (shipCoordY < 0 || shipCoordY > 7) {\n      return { inner: null, handleClick: null };\n    }\n\n    if (ocean[shipCoordX][shipCoordY] != 0) {\n      inner = null;\n      handleClick = null;\n    }\n  }\n\n  return { inner, handleClick };\n};\n\nexport const getCoordArrayFromShip: any = (\n  length: number,\n  orientation: string,\n  targetX: number | null,\n  targetY: number | null\n) => {\n  if (targetX === null || targetY === null) {\n    return null;\n  }\n\n  let arr = Array(length).fill(0);\n  if (orientation === \"Vertical\") {\n    for (let i = -1; i < arr.length - 1; i++) {\n      arr[i + 1] = {\n        coords: [targetX + i, targetY],\n        isHit: false,\n      };\n    }\n  } else {\n    for (let i = -1; i < arr.length - 1; i++) {\n      arr[i + 1] = {\n        coords: [targetX, targetY + i],\n        isHit: false,\n      };\n    }\n  }\n  return arr;\n};\n\nexport const generateLetters = () => {\n  let letters = [];\n\n  for (let i = 0; i < 9; i++) {\n    let inner: string | null = String.fromCharCode(i - 1 + 65);\n    if (i === 0) {\n      inner = null;\n    }\n    letters.push(\n      <div\n        key={i}\n        style={{\n          height: \"100%\",\n          width: \"100%\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          color: \"white\",\n          opacity: \"0.5\",\n        }}\n      >\n        {inner}\n      </div>\n    );\n  }\n\n  return letters;\n};\n\nexport const generateNumbers = () => {\n  let numbers = [];\n  for (let j = 0; j < 8; j++) {\n    numbers.push(\n      <div\n        key={j}\n        style={{\n          height: \"100%\",\n          width: \"100%\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          color: \"white\",\n          opacity: \"0.5\",\n        }}\n      >\n        {j + 1}\n      </div>\n    );\n  }\n  return numbers;\n};\n","export class Ship {\n  name: string;\n  length: number;\n  orientation: string;\n  mainX: number | null;\n  mainY: number | null;\n  coordinateArray: number[][] | null;\n  isCurrent: boolean;\n\n  constructor(\n    name: string,\n    length: number,\n    orientation: string,\n    mainX: number | null,\n    mainY: number | null,\n    coordinateArray: number[][] | null,\n    isCurrent: boolean\n  ) {\n    this.name = name;\n    this.length = length;\n    this.orientation = orientation;\n    this.mainX = mainX;\n    this.mainY = mainY;\n    this.coordinateArray = coordinateArray;\n    this.isCurrent = isCurrent;\n  }\n}\n","import React, { useContext, useReducer } from \"react\";\n\nimport { Ship } from \"./ShipConstructor\";\n\nexport interface ShipInterface {\n  /**\n   * Name must be a string.\n   */\n  name: string;\n  /**\n   * Length must be an int;\n   */\n  length: number;\n  /**\n   * Orientation must be a string.\n   */\n  orientation: string;\n  /**\n   * MainX is the X value of the user-selected tile upon which to place the ship.\n   */\n  mainX: number | null;\n  /**\n   * MainY is the Y value of the user-selected tile upon which to place the ship.\n   */\n  mainY: number | null;\n  /**\n   * Coordinate Array is an array of arrays, each signifying coordinates\n   * where the ship is placed\n   */\n  coordinateArray: any[][];\n}\n\nconst initialShips: any = [\n  new Ship(\"Battleship\", 4, \"Horizontal\", null, null, null, true),\n  new Ship(\"Carrier\", 5, \"Horizontal\", null, null, null, false),\n  new Ship(\"Cruiser\", 3, \"Horizontal\", null, null, null, false),\n  new Ship(\"Submarine\", 3, \"Horizontal\", null, null, null, false),\n  new Ship(\"Destroyer\", 2, \"Horizontal\", null, null, null, false),\n];\n\nconst ShipContext = React.createContext(initialShips);\n\nconst ShipProvider = ({ children }: any) => {\n  const reducer = (state: any, action: any) => {\n    switch (action.type) {\n      case \"setCurrentShip\":\n        return action.payload;\n      case \"updateCurrentShip\":\n        return action.payload;\n    }\n  };\n\n  const [ships, dispatch] = useReducer(reducer, initialShips);\n\n  const setCurrentShip = (ship: ShipInterface) => {\n    let copyOfShips = [...ships];\n\n    for (let i = 0; i < copyOfShips.length; i++) {\n      if (ship.name === copyOfShips[i].name) {\n        if (i === copyOfShips.length - 1) {\n          // copyOfShips[i].isCurrent = false;\n          // copyOfShips[0].isCurrent = true;\n          dispatch({ type: \"setCurrentShip\", payload: copyOfShips });\n          return;\n        }\n        copyOfShips[i].isCurrent = false;\n        copyOfShips[i + 1].isCurrent = true;\n\n        dispatch({ type: \"setCurrentShip\", payload: copyOfShips });\n        return;\n      } else {\n        copyOfShips[i].isCurrent = false;\n      }\n    }\n  };\n\n  const updateCurrentShip = (method: string, arr: any) => {\n    let currentShip;\n    let copyOfShips = [...ships];\n    for (let i = 0; i < copyOfShips.length; i++) {\n      if (copyOfShips[i].isCurrent) {\n        currentShip = copyOfShips[i];\n\n        switch (method) {\n          case \"changeOrientation\":\n            if (currentShip.orientation === \"Vertical\") {\n              currentShip.orientation = \"Horizontal\";\n            } else {\n              currentShip.orientation = \"Vertical\";\n            }\n\n            dispatch({ type: \"updateCurrentShip\", payload: copyOfShips });\n            break;\n          case \"updateCoords\":\n            currentShip.coordinateArray = arr;\n            dispatch({ type: \"updateCurrentShip\", payload: copyOfShips });\n            break;\n          default:\n          // do something\n        }\n      }\n    }\n  };\n\n  const getCurrentShip = () => {\n    for (let i = 0; i < ships.length; i++) {\n      if (ships[i].isCurrent) {\n        return ships[i];\n      }\n    }\n  };\n\n  const ctx = {\n    currentShip: getCurrentShip,\n    updateCurrentShip,\n    setCurrentShip,\n    ships,\n  };\n\n  return <ShipContext.Provider value={ctx}>{children}</ShipContext.Provider>;\n};\n\nexport default ShipProvider;\n\nexport const useShip = () => useContext(ShipContext);\n","import React, { useContext, useState } from \"react\";\n\nconst initial = 50;\nconst SquareContext = React.createContext(initial);\n\nconst SquareSizeProvider = ({ children }: any) => {\n  const [squareSize, setSquareSize] = useState(initial);\n\n  const ctx: any = {\n    squareSize,\n    setSquareSize,\n  };\n\n  return (\n    <SquareContext.Provider value={ctx}>{children}</SquareContext.Provider>\n  );\n};\n\nexport default SquareSizeProvider;\n\nexport const useSquareSize = () => useContext(SquareContext);\n","import { useGameContext } from \"../../context/GameContext\";\n\nimport { useShip } from \"../../context/ShipContext\";\n\nimport \"../../App.css\";\n\nimport { useSquareSize } from \"../../context/SquareSize\";\n\nimport {\n  checkIfShipOutOfBounds,\n  getCoordArrayFromShip,\n} from \"../../helperFunctions\";\n\ninterface SquareProps {\n  squareValue: number;\n  coordinates: number[];\n  isHovering: any[];\n  setIsHovering: Function;\n}\n\nconst EmptyTile: React.FC<SquareProps> = ({\n  squareValue,\n  coordinates,\n  isHovering,\n  setIsHovering,\n}) => {\n  const { squareSize }: any = useSquareSize();\n  let { ships, currentShip, setCurrentShip, updateCurrentShip } = useShip();\n\n  currentShip = currentShip();\n\n  const { ocean, enterShips } = useGameContext();\n\n  const shipTile = (\n    <div\n      style={{\n        width: \"100%\",\n        height: \"100%\",\n        backgroundColor: \"var(--shipColor)\",\n      }}\n    ></div>\n  );\n\n  let inner: any = null;\n  let arr = getCoordArrayFromShip(\n    currentShip.length,\n    currentShip.orientation,\n    isHovering[0],\n    isHovering[1]\n  );\n\n  let handleClick: any = () => {\n    enterShips(arr, currentShip.orientation);\n    updateCurrentShip(\"updateCoords\", arr);\n    setCurrentShip(currentShip);\n  };\n\n  if (arr) {\n    let result = checkIfShipOutOfBounds(\n      arr,\n      shipTile,\n      inner,\n      handleClick,\n      coordinates,\n      ocean\n    );\n    inner = result.inner;\n    handleClick = result.handleClick;\n  }\n\n  return (\n    <div\n      onClick={handleClick}\n      onMouseEnter={() => setIsHovering([...coordinates])}\n      onMouseLeave={() => setIsHovering([null, null])}\n      style={{\n        width: squareSize + \"px\",\n        height: \"100%\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        cursor: \"pointer\",\n        overflow: \"hidden\",\n      }}\n    >\n      {inner}\n    </div>\n  );\n};\n\nexport default EmptyTile;\n","import { useSquareSize } from \"../../context/SquareSize\";\n\nconst GridOverlay = () => {\n  const { squareSize }: any = useSquareSize();\n\n  let columns: any = [];\n  let rows: any = [];\n\n  for (let i = 0; i < 8; i++) {\n    let borderRight = \"2px solid white\";\n    let borderBottom = \"2px solid white\";\n\n    if (i === 7) {\n      borderRight = \"none\";\n      borderBottom = \"none\";\n    }\n    columns.push(\n      <div\n        key={i}\n        style={{\n          width: squareSize + \"px\",\n          height: \"100%\",\n          borderRight,\n        }}\n      ></div>\n    );\n    rows.push(\n      <div key={i} style={{ width: \"100%\", height: \"50%\", borderBottom }}></div>\n    );\n  }\n\n  return (\n    <div\n      style={{\n        width: 8 * squareSize + \"px\",\n        height: 8 * squareSize + \"px\",\n        position: \"absolute\",\n        top: \"0\",\n        left: \"0\",\n        backgroundColor: \"transparent\",\n      }}\n    >\n      <div\n        style={{\n          position: \"absolute\",\n          width: \"100%\",\n          height: \"100%\",\n          display: \"flex\",\n          justifyContent: \"flex-start\",\n          alignItems: \"center\",\n        }}\n      >\n        {columns}\n      </div>\n      <div\n        style={{\n          position: \"absolute\",\n          width: \"100%\",\n          height: \"100%\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"flex-start\",\n          alignItems: \"center\",\n        }}\n      >\n        {rows}\n      </div>\n    </div>\n  );\n};\n\nexport default GridOverlay;\n","import \"../../App.css\";\n\nimport { useSquareSize } from \"../../context/SquareSize\";\n\ninterface ShipTileProps {\n  //   borderRight: string;\n  //   borderBottom: string;\n}\nconst ShipTile: React.FC<ShipTileProps> = () => {\n  const { squareSize }: any = useSquareSize();\n\n  return (\n    <div\n      style={{\n        width: squareSize + \"px\",\n        height: \"100%\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        cursor: \"pointer\",\n        backgroundColor: \"var(--shipColor)\",\n        border: \"2px solid var(--shipColor)\",\n        overflow: \"hidden\",\n      }}\n    >\n      <div\n        style={{\n          width: \"100%\",\n          height: \"100%\",\n          backgroundColor: \"var(--shipColor)\",\n        }}\n      ></div>\n    </div>\n  );\n};\n\nexport default ShipTile;\n","import \"../../App.css\";\n\nimport { useSquareSize } from \"../../context/SquareSize\";\n\ninterface EndPieceProps {\n  coordinates: number[];\n  squareValue: number;\n}\nconst EndPiece: React.FC<EndPieceProps> = ({ coordinates, squareValue }) => {\n  const { squareSize }: any = useSquareSize();\n  let direction;\n  let borderRight = \"none\";\n  let borderBottom = \"none\";\n\n  switch (squareValue) {\n    case 2:\n      direction = \"pointLeft\";\n      break;\n    case 3:\n      direction = \"pointRight\";\n      borderRight = \"2px solid white\";\n      break;\n    case 4:\n      direction = \"pointUp\";\n      borderRight = \"2px solid white\";\n      break;\n    case 5:\n      direction = \"pointDown\";\n      break;\n    default:\n      direction = \"pointLeft\";\n  }\n\n  if (coordinates[1] === 7) {\n    borderRight = \"none\";\n  }\n\n  return (\n    <div\n      style={{\n        height: \"95%\",\n        width: squareSize + \"px\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <div className={`endPiece ${direction}`}></div>\n    </div>\n  );\n};\n\nexport default EndPiece;\n","import { useGameContext } from \"../../context/GameContext\";\nimport { useShip } from \"../../context/ShipContext\";\n\nimport { useSquareSize } from \"../../context/SquareSize\";\n\nimport \"../../App.css\";\n\nimport EmptyTile from \"../Square/EmptyTile\";\n\nimport { useState } from \"react\";\n\nimport GridOverlay from \"../GridOverlay/GridOverlay\";\n\nimport ShipTile from \"../Square/ShipTile\";\nimport EndPiece from \"../Square/EndPiece\";\nimport { useEffect } from \"react\";\n\nimport { generateLetters, generateNumbers } from \"../../helperFunctions\";\n\nconst Ocean: React.FC = () => {\n  const { squareSize, setSquareSize }: any = useSquareSize();\n\n  useEffect(() => {\n    if (window.innerWidth < 400) {\n      setSquareSize(38);\n    }\n  }, []);\n\n  const { ocean } = useGameContext();\n\n  const [isHovering, setIsHovering] = useState([null, null]);\n\n  let letters = generateLetters();\n  let numbers = generateNumbers();\n\n  return (\n    <>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"flex-start\",\n          alignItems: \"center\",\n        }}\n      >\n        <div\n          style={{\n            height: squareSize + \"px\",\n            width: 9 * squareSize + \"px\",\n            display: \"flex\",\n          }}\n        >\n          {letters}\n        </div>\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            height: 8 * squareSize + \"px\",\n          }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              width: squareSize + \"px\",\n              height: \"100%\",\n            }}\n          >\n            {numbers}\n          </div>\n          <div\n            style={{\n              height: 8 * squareSize + \"px\",\n              width: 8 * squareSize + \"px\",\n              position: \"relative\",\n            }}\n          >\n            <GridOverlay />\n            {ocean.map((item: any, index1: any) => {\n              return (\n                <div\n                  key={index1}\n                  style={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    width: \"100%\",\n                    position: \"relative\",\n                    height: squareSize + \"px\",\n                  }}\n                >\n                  {item.map((item: any, index2: any) => {\n                    const coordinates = [index1, index2];\n\n                    switch (item) {\n                      case 0:\n                        return (\n                          <EmptyTile\n                            key={index2}\n                            coordinates={coordinates}\n                            squareValue={item}\n                            isHovering={isHovering}\n                            setIsHovering={setIsHovering}\n                          />\n                        );\n                      case 1:\n                        return <ShipTile key={index2} />;\n                      default:\n                        return (\n                          <EndPiece\n                            key={index2}\n                            coordinates={coordinates}\n                            squareValue={item}\n                          />\n                        );\n                    }\n                  })}\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Ocean;\n","import \"../../App.css\";\n\nimport { useShip } from \"../../context/ShipContext\";\n\nimport { BiRefresh } from \"react-icons/bi\";\n\nimport { useSquareSize } from \"../../context/SquareSize\";\n\n// import { getCurrentShip } from \"../../helperFunctions\";\n\nconst Instructions: React.FC = () => {\n  const { squareSize }: any = useSquareSize();\n  let { ships, currentShip, updateCurrentShip } = useShip();\n\n  currentShip = currentShip();\n\n  const { name, length, orientation } = currentShip;\n\n  return (\n    <div\n      style={{\n        marginBottom: \"10px\",\n        width: \"100%\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        color: \"white\",\n        maxWidth: \"90vw\",\n      }}\n    >\n      <h1 style={{ margin: \"8px\" }} className=\"instructionsHeader\">\n        Place your&nbsp;\n        <span\n          style={{\n            borderBottom: \"2px solid white\",\n          }}\n        >\n          {name}\n        </span>\n      </h1>\n      <ul\n        style={{\n          listStyleType: \"none\",\n          minWidth: \"300px\",\n          maxWidth: \"450px\",\n          padding: \"0\",\n        }}\n      >\n        <li\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            marginBottom: \"10px\",\n          }}\n        >\n          <span>Length:</span>\n          <span className=\"instructionControls\">{length}&nbsp;tiles</span>\n        </li>\n        <li\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <span>Orientation:</span>\n\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            <span\n              style={{\n                textDecoration: \"underline\",\n                marginRight: \"10px\",\n              }}\n              className=\"instructionControls\"\n            >\n              {orientation}\n            </span>\n            <button\n              onClick={() => updateCurrentShip(\"changeOrientation\")}\n              className=\"orientationToggle\"\n            >\n              <BiRefresh color=\"white\" size=\"2rem\" />\n            </button>\n          </div>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default Instructions;\n","import { useEffect, useState, useRef } from \"react\";\nimport WAVES from \"vanta/dist/vanta.waves.min.js\";\n\nimport Ocean from \"../Ocean/Ocean\";\nimport Instructions from \"../Instructions/Instructions\";\n\nconst Waves = () => {\n  const [vantaEffect, setVantaEffect] = useState<any>(0);\n  const myRef = useRef(null);\n  useEffect(() => {\n    if (!vantaEffect) {\n      setVantaEffect(\n        WAVES({\n          el: myRef.current,\n          mouseControls: false,\n          touchControls: false,\n          gyroControls: false,\n          minHeight: 200.0,\n          minWidth: 200.0,\n          scale: 1.0,\n          scaleMobile: 1.0,\n          // color: 0x191b1e,\n          color: 0x101e36,\n          waveHeight: 30.0,\n          waveSpeed: 0.4,\n          zoom: 0.81,\n        })\n      );\n    }\n    return () => {\n      if (vantaEffect) vantaEffect.destroy();\n    };\n  }, [vantaEffect]);\n\n  const [isEnteringShips, setIsEnteringShips] = useState(true);\n\n  return (\n    <div\n      ref={myRef}\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"flex-start\",\n        alignItems: \"center\",\n        width: \"100vw\",\n        height: \"700px\",\n      }}\n    >\n      {isEnteringShips ? <Instructions /> : null}\n      <Ocean />\n    </div>\n  );\n};\n\nexport default Waves;\n","import OceanProvider from \"./context/GameContext\";\n\nimport ShipProvider from \"./context/ShipContext\";\n\nimport SquareSizeProvider from \"./context/SquareSize\";\n\nimport Waves from \"./components/Waves/Waves\";\n\nconst App: React.FC = () => {\n  return (\n    <SquareSizeProvider>\n      <OceanProvider>\n        <ShipProvider>\n          <Waves />\n        </ShipProvider>\n      </OceanProvider>\n    </SquareSizeProvider>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}